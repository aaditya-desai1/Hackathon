{"ast":null,"code":"var _jsxFileName = \"E:\\\\git_projects\\\\test\\\\frontend\\\\src\\\\pages\\\\Visualizations.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Box, Typography, Button, Dialog, DialogTitle, DialogContent, DialogActions, Grid, Card, CardContent, CardHeader, LinearProgress, List, ListItem, ListItemText, ListItemIcon, Chip, Divider, Alert } from '@mui/material';\nimport { BarChart as ChartIcon, Add as AddIcon, Timeline as TimelineIcon, BubbleChart as ScatterIcon, ShowChart as LineIcon, PieChart as PieIcon } from '@mui/icons-material';\nimport PageHeader from '../components/common/PageHeader';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Visualizations() {\n  _s();\n  const location = useLocation();\n  const [openDialog, setOpenDialog] = useState(false);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [files, setFiles] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [analysis, setAnalysis] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    var _location$state;\n    fetchFiles();\n    if ((_location$state = location.state) !== null && _location$state !== void 0 && _location$state.openCreateDialog) {\n      setOpenDialog(true);\n      window.history.replaceState({}, document.title);\n    }\n  }, [location]);\n  const fetchFiles = async () => {\n    try {\n      const response = await fetch('/api/files');\n      const data = await response.json();\n      setFiles(data.files || []);\n    } catch (error) {\n      console.error('Error fetching files:', error);\n      setError('Failed to fetch files');\n    }\n  };\n  const handleCreateClick = () => {\n    setOpenDialog(true);\n  };\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n    setSelectedFile(null);\n    setAnalysis(null);\n  };\n  const handleFileSelect = async file => {\n    setSelectedFile(file);\n    setLoading(true);\n    setError(null);\n    try {\n      console.log('Analyzing file with ID:', file._id);\n      const response = await fetch(`/api/files/${file._id}/analyze`);\n      console.log('Analysis response status:', response.status);\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error('Analysis error details:', errorData);\n        throw new Error(errorData.error || 'Analysis failed');\n      }\n      const analysisData = await response.json();\n      console.log('Analysis result:', analysisData);\n\n      // Check the structure of analysis data and adapt as needed\n      if (analysisData.success && analysisData.analysis) {\n        var _analysisData$analysi;\n        setAnalysis({\n          rowCount: ((_analysisData$analysi = analysisData.analysis.summary) === null || _analysisData$analysi === void 0 ? void 0 : _analysisData$analysi.totalRows) || 0,\n          columns: Object.keys(analysisData.analysis.basicAnalysis || {}),\n          visualizationSuggestions: [{\n            type: 'bar',\n            description: 'Bar Chart',\n            reasoning: 'Based on data structure',\n            confidence: 85\n          }, {\n            type: 'line',\n            description: 'Line Chart',\n            reasoning: 'Good for trends over time',\n            confidence: 75\n          }]\n        });\n      } else {\n        setAnalysis({\n          rowCount: 0,\n          columns: [],\n          visualizationSuggestions: []\n        });\n      }\n    } catch (error) {\n      console.error('Error analyzing file:', error);\n      setError('Failed to analyze file');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleCreateVisualization = async () => {\n    if (!selectedFile || !analysis) return;\n    try {\n      var _analysis$visualizati, _analysis$visualizati2;\n      setLoading(true);\n\n      // Create a basic config from the selected file and analysis\n      const config = {\n        xAxis: {\n          field: analysis.columns[0] || '',\n          label: analysis.columns[0] || ''\n        },\n        yAxis: {\n          field: analysis.columns[1] || '',\n          label: analysis.columns[1] || ''\n        },\n        title: `${selectedFile.name} Visualization`,\n        subtitle: `Generated on ${new Date().toLocaleDateString()}`\n      };\n\n      // Use the first suggested visualization type or default to bar\n      const chartType = ((_analysis$visualizati = analysis.visualizationSuggestions) === null || _analysis$visualizati === void 0 ? void 0 : (_analysis$visualizati2 = _analysis$visualizati[0]) === null || _analysis$visualizati2 === void 0 ? void 0 : _analysis$visualizati2.type) || 'bar';\n\n      // Send request to create visualization\n      const response = await fetch('/api/visualizations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: `${selectedFile.name} Visualization`,\n          description: `Auto-generated visualization for ${selectedFile.name}`,\n          fileId: selectedFile._id,\n          chartType: chartType,\n          config: config\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to create visualization');\n      }\n      const result = await response.json();\n      console.log('Visualization created:', result);\n\n      // Close dialog and refresh visualizations\n      handleCloseDialog();\n      alert('Visualization created successfully!');\n\n      // TODO: Navigate to the created visualization\n    } catch (error) {\n      console.error('Error creating visualization:', error);\n      setError('Failed to create visualization: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getVisualizationIcon = type => {\n    switch (type) {\n      case 'bar':\n        return /*#__PURE__*/_jsxDEV(ChartIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 16\n        }, this);\n      case 'scatter':\n        return /*#__PURE__*/_jsxDEV(ScatterIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 16\n        }, this);\n      case 'line':\n        return /*#__PURE__*/_jsxDEV(LineIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 16\n        }, this);\n      case 'pie':\n        return /*#__PURE__*/_jsxDEV(PieIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(TimelineIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n      title: \"Visualizations\",\n      icon: /*#__PURE__*/_jsxDEV(ChartIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 15\n      }, this),\n      actions: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 24\n        }, this),\n        onClick: handleCreateClick,\n        children: \"Create Visualization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      sx: {\n        mt: 2\n      },\n      children: files.length === 0 ? /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          color: \"text.secondary\",\n          children: \"No files available for visualization. Upload files in the File Manager.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 11\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openDialog,\n      onClose: handleCloseDialog,\n      maxWidth: \"md\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Create Visualization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          sx: {\n            mb: 2\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this), !selectedFile ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            gutterBottom: true,\n            children: \"Select a file to analyze and visualize:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(List, {\n            children: files.map(file => /*#__PURE__*/_jsxDEV(ListItem, {\n              button: true,\n              onClick: () => handleFileSelect(file),\n              children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n                children: /*#__PURE__*/_jsxDEV(ChartIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: file.name,\n                secondary: `${file.type} - ${(file.size / 1024).toFixed(2)} KB`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 21\n              }, this)]\n            }, file._id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: [\"Analysis for \", selectedFile.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this), loading ? /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              width: '100%',\n              mt: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                mt: 1\n              },\n              color: \"text.secondary\",\n              children: \"Analyzing data...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 17\n          }, this) : analysis ? /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Card, {\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n                title: \"Data Summary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  children: [\"Total rows: \", analysis.rowCount]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 281,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  children: [\"Columns analyzed: \", analysis.columns.length]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 284,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Recommended Visualizations\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(List, {\n              children: analysis.visualizationSuggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(ListItem, {\n                  children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n                    children: getVisualizationIcon(suggestion.type)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 297,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                    primary: suggestion.description,\n                    secondary: suggestion.reasoning\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 300,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(Chip, {\n                    label: `${suggestion.confidence}% confidence`,\n                    color: suggestion.confidence > 80 ? 'success' : 'primary',\n                    sx: {\n                      ml: 2\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 304,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 296,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 25\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 17\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [selectedFile && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setSelectedFile(null),\n          children: \"Back to File Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCloseDialog,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 11\n        }, this), analysis && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleCreateVisualization,\n          children: \"Create Visualization\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n}\n_s(Visualizations, \"M9QpmfjDOFy0S20HsIALggeeeBU=\", false, function () {\n  return [useLocation];\n});\n_c = Visualizations;\nexport default Visualizations;\nvar _c;\n$RefreshReg$(_c, \"Visualizations\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","Box","Typography","Button","Dialog","DialogTitle","DialogContent","DialogActions","Grid","Card","CardContent","CardHeader","LinearProgress","List","ListItem","ListItemText","ListItemIcon","Chip","Divider","Alert","BarChart","ChartIcon","Add","AddIcon","Timeline","TimelineIcon","BubbleChart","ScatterIcon","ShowChart","LineIcon","PieChart","PieIcon","PageHeader","jsxDEV","_jsxDEV","Fragment","_Fragment","Visualizations","_s","location","openDialog","setOpenDialog","selectedFile","setSelectedFile","files","setFiles","loading","setLoading","analysis","setAnalysis","error","setError","_location$state","fetchFiles","state","openCreateDialog","window","history","replaceState","document","title","response","fetch","data","json","console","handleCreateClick","handleCloseDialog","handleFileSelect","file","log","_id","status","ok","errorData","Error","analysisData","success","_analysisData$analysi","rowCount","summary","totalRows","columns","Object","keys","basicAnalysis","visualizationSuggestions","type","description","reasoning","confidence","handleCreateVisualization","_analysis$visualizati","_analysis$visualizati2","config","xAxis","field","label","yAxis","name","subtitle","Date","toLocaleDateString","chartType","method","headers","body","JSON","stringify","fileId","message","result","alert","getVisualizationIcon","fileName","_jsxFileName","lineNumber","columnNumber","sx","p","children","icon","actions","variant","startIcon","onClick","container","spacing","mt","length","item","xs","color","open","onClose","maxWidth","fullWidth","severity","mb","gutterBottom","map","button","primary","secondary","size","toFixed","width","suggestion","index","ml","_c","$RefreshReg$"],"sources":["E:/git_projects/test/frontend/src/pages/Visualizations.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  LinearProgress,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  Chip,\r\n  Divider,\r\n  Alert,\r\n} from '@mui/material';\r\nimport {\r\n  BarChart as ChartIcon,\r\n  Add as AddIcon,\r\n  Timeline as TimelineIcon,\r\n  BubbleChart as ScatterIcon,\r\n  ShowChart as LineIcon,\r\n  PieChart as PieIcon,\r\n} from '@mui/icons-material';\r\nimport PageHeader from '../components/common/PageHeader';\r\n\r\nfunction Visualizations() {\r\n  const location = useLocation();\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [files, setFiles] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [analysis, setAnalysis] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchFiles();\r\n    if (location.state?.openCreateDialog) {\r\n      setOpenDialog(true);\r\n      window.history.replaceState({}, document.title);\r\n    }\r\n  }, [location]);\r\n\r\n  const fetchFiles = async () => {\r\n    try {\r\n      const response = await fetch('/api/files');\r\n      const data = await response.json();\r\n      setFiles(data.files || []);\r\n    } catch (error) {\r\n      console.error('Error fetching files:', error);\r\n      setError('Failed to fetch files');\r\n    }\r\n  };\r\n\r\n  const handleCreateClick = () => {\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n    setSelectedFile(null);\r\n    setAnalysis(null);\r\n  };\r\n\r\n  const handleFileSelect = async (file) => {\r\n    setSelectedFile(file);\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      console.log('Analyzing file with ID:', file._id);\r\n      const response = await fetch(`/api/files/${file._id}/analyze`);\r\n      console.log('Analysis response status:', response.status);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        console.error('Analysis error details:', errorData);\r\n        throw new Error(errorData.error || 'Analysis failed');\r\n      }\r\n      \r\n      const analysisData = await response.json();\r\n      console.log('Analysis result:', analysisData);\r\n      \r\n      // Check the structure of analysis data and adapt as needed\r\n      if (analysisData.success && analysisData.analysis) {\r\n        setAnalysis({\r\n          rowCount: analysisData.analysis.summary?.totalRows || 0,\r\n          columns: Object.keys(analysisData.analysis.basicAnalysis || {}),\r\n          visualizationSuggestions: [\r\n            {\r\n              type: 'bar',\r\n              description: 'Bar Chart',\r\n              reasoning: 'Based on data structure',\r\n              confidence: 85\r\n            },\r\n            {\r\n              type: 'line',\r\n              description: 'Line Chart',\r\n              reasoning: 'Good for trends over time',\r\n              confidence: 75\r\n            }\r\n          ]\r\n        });\r\n      } else {\r\n        setAnalysis({\r\n          rowCount: 0,\r\n          columns: [],\r\n          visualizationSuggestions: []\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error analyzing file:', error);\r\n      setError('Failed to analyze file');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCreateVisualization = async () => {\r\n    if (!selectedFile || !analysis) return;\r\n    \r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Create a basic config from the selected file and analysis\r\n      const config = {\r\n        xAxis: {\r\n          field: analysis.columns[0] || '',\r\n          label: analysis.columns[0] || ''\r\n        },\r\n        yAxis: {\r\n          field: analysis.columns[1] || '',\r\n          label: analysis.columns[1] || ''\r\n        },\r\n        title: `${selectedFile.name} Visualization`,\r\n        subtitle: `Generated on ${new Date().toLocaleDateString()}`\r\n      };\r\n      \r\n      // Use the first suggested visualization type or default to bar\r\n      const chartType = analysis.visualizationSuggestions?.[0]?.type || 'bar';\r\n      \r\n      // Send request to create visualization\r\n      const response = await fetch('/api/visualizations', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          name: `${selectedFile.name} Visualization`,\r\n          description: `Auto-generated visualization for ${selectedFile.name}`,\r\n          fileId: selectedFile._id,\r\n          chartType: chartType,\r\n          config: config\r\n        })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Failed to create visualization');\r\n      }\r\n      \r\n      const result = await response.json();\r\n      console.log('Visualization created:', result);\r\n      \r\n      // Close dialog and refresh visualizations\r\n      handleCloseDialog();\r\n      alert('Visualization created successfully!');\r\n      \r\n      // TODO: Navigate to the created visualization\r\n    } catch (error) {\r\n      console.error('Error creating visualization:', error);\r\n      setError('Failed to create visualization: ' + error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getVisualizationIcon = (type) => {\r\n    switch (type) {\r\n      case 'bar':\r\n        return <ChartIcon />;\r\n      case 'scatter':\r\n        return <ScatterIcon />;\r\n      case 'line':\r\n        return <LineIcon />;\r\n      case 'pie':\r\n        return <PieIcon />;\r\n      default:\r\n        return <TimelineIcon />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <PageHeader\r\n        title=\"Visualizations\"\r\n        icon={<ChartIcon />}\r\n        actions={\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<AddIcon />}\r\n            onClick={handleCreateClick}\r\n          >\r\n            Create Visualization\r\n          </Button>\r\n        }\r\n      />\r\n\r\n      <Grid container spacing={3} sx={{ mt: 2 }}>\r\n        {files.length === 0 ? (\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"body1\" color=\"text.secondary\">\r\n              No files available for visualization. Upload files in the File Manager.\r\n            </Typography>\r\n          </Grid>\r\n        ) : null}\r\n      </Grid>\r\n\r\n      <Dialog\r\n        open={openDialog}\r\n        onClose={handleCloseDialog}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Create Visualization</DialogTitle>\r\n        <DialogContent>\r\n          {error && (\r\n            <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n              {error}\r\n            </Alert>\r\n          )}\r\n\r\n          {!selectedFile ? (\r\n            <>\r\n              <Typography gutterBottom>\r\n                Select a file to analyze and visualize:\r\n              </Typography>\r\n              <List>\r\n                {files.map((file) => (\r\n                  <ListItem\r\n                    key={file._id}\r\n                    button\r\n                    onClick={() => handleFileSelect(file)}\r\n                  >\r\n                    <ListItemIcon>\r\n                      <ChartIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText\r\n                      primary={file.name}\r\n                      secondary={`${file.type} - ${(file.size / 1024).toFixed(2)} KB`}\r\n                    />\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            </>\r\n          ) : (\r\n            <Box>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Analysis for {selectedFile.name}\r\n              </Typography>\r\n              \r\n              {loading ? (\r\n                <Box sx={{ width: '100%', mt: 2 }}>\r\n                  <LinearProgress />\r\n                  <Typography sx={{ mt: 1 }} color=\"text.secondary\">\r\n                    Analyzing data...\r\n                  </Typography>\r\n                </Box>\r\n              ) : analysis ? (\r\n                <Box>\r\n                  <Card sx={{ mb: 2 }}>\r\n                    <CardHeader title=\"Data Summary\" />\r\n                    <CardContent>\r\n                      <Typography>\r\n                        Total rows: {analysis.rowCount}\r\n                      </Typography>\r\n                      <Typography>\r\n                        Columns analyzed: {analysis.columns.length}\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </Card>\r\n\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Recommended Visualizations\r\n                  </Typography>\r\n                  <List>\r\n                    {analysis.visualizationSuggestions.map((suggestion, index) => (\r\n                      <React.Fragment key={index}>\r\n                        <ListItem>\r\n                          <ListItemIcon>\r\n                            {getVisualizationIcon(suggestion.type)}\r\n                          </ListItemIcon>\r\n                          <ListItemText\r\n                            primary={suggestion.description}\r\n                            secondary={suggestion.reasoning}\r\n                          />\r\n                          <Chip\r\n                            label={`${suggestion.confidence}% confidence`}\r\n                            color={suggestion.confidence > 80 ? 'success' : 'primary'}\r\n                            sx={{ ml: 2 }}\r\n                          />\r\n                        </ListItem>\r\n                        <Divider />\r\n                      </React.Fragment>\r\n                    ))}\r\n                  </List>\r\n                </Box>\r\n              ) : null}\r\n            </Box>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          {selectedFile && (\r\n            <Button onClick={() => setSelectedFile(null)}>\r\n              Back to File Selection\r\n            </Button>\r\n          )}\r\n          <Button onClick={handleCloseDialog}>Cancel</Button>\r\n          {analysis && (\r\n            <Button variant=\"contained\" onClick={handleCreateVisualization}>\r\n              Create Visualization\r\n            </Button>\r\n          )}\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Visualizations; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}