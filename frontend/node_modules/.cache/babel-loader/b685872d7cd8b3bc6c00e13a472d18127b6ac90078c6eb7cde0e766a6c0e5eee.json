{"ast":null,"code":"var _jsxFileName = \"E:\\\\git_projects\\\\DataVizPro\\\\frontend\\\\src\\\\components\\\\visualization\\\\ChartRecommendations.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Box, Typography, Card, CardContent, CardHeader, CardActions, Button, Chip, Divider, Grid, LinearProgress, Paper, IconButton, Tooltip, Alert, CircularProgress } from '@mui/material';\nimport { BarChart as BarChartIcon, PieChart as PieChartIcon, Timeline as LineChartIcon, BubbleChart as ScatterIcon, ShowChart as TrendIcon, DonutLarge as DonutIcon, TableChart as TableChartIcon, Layers as StackedIcon, Map as MapIcon, Info as InfoIcon, Add as AddIcon } from '@mui/icons-material';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartRecommendations = ({\n  file,\n  onSaveChart\n}) => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [recommendations, setRecommendations] = useState([]);\n  const [error, setError] = useState(null);\n  const chartRefs = useRef({});\n  const chartInstances = useRef({});\n  useEffect(() => {\n    if (file !== null && file !== void 0 && file._id) {\n      generateRecommendations(file);\n    }\n    return () => {\n      // Clean up charts on unmount\n      Object.values(chartInstances.current).forEach(instance => {\n        if (instance) instance.destroy();\n      });\n      chartInstances.current = {};\n    };\n  }, [file]);\n  const generateRecommendations = async file => {\n    setLoading(true);\n    setError(null);\n    try {\n      // First ensure we have analysis data\n      const analysisResponse = await fetch(`/api/files/${file._id}/analyze`);\n      if (!analysisResponse.ok) {\n        throw new Error('Failed to analyze file data');\n      }\n\n      // Then request AI recommendations\n      const response = await fetch(`/api/visualizations/recommend/${file._id}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to generate recommendations');\n      }\n      const data = await response.json();\n      if (data.success && data.visualization) {\n        // For this demo, we'll generate multiple chart types from the recommendation\n        const baseRecommendation = data.visualization;\n        const recommendedCharts = generateChartVariations(baseRecommendation);\n        setRecommendations(recommendedCharts);\n\n        // Render charts after component updates\n        setTimeout(() => {\n          renderCharts(recommendedCharts);\n        }, 200);\n      } else {\n        setError('No recommendations available');\n      }\n    } catch (err) {\n      console.error('Error generating recommendations:', err);\n      setError(err.message || 'Failed to generate recommendations');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const generateChartVariations = baseRecommendation => {\n    // Extract fields from the recommendation\n    const {\n      fileId,\n      config,\n      name\n    } = baseRecommendation;\n    const {\n      xAxis,\n      yAxis\n    } = config;\n\n    // Generate variations based on data types\n    return [{\n      id: 'rec-bar',\n      chartType: 'bar',\n      name: `${name} - Bar Chart`,\n      description: `Bar chart showing ${yAxis.label} by ${xAxis.label}`,\n      fileId,\n      config: {\n        ...config,\n        chartType: 'bar'\n      },\n      confidence: 95\n    }, {\n      id: 'rec-line',\n      chartType: 'line',\n      name: `${name} - Line Chart`,\n      description: `Line chart showing trends in ${yAxis.label} over ${xAxis.label}`,\n      fileId,\n      config: {\n        ...config,\n        chartType: 'line'\n      },\n      confidence: 85\n    }, {\n      id: 'rec-pie',\n      chartType: 'pie',\n      name: `${name} - Pie Chart`,\n      description: `Pie chart showing distribution of ${yAxis.label} across ${xAxis.label}`,\n      fileId,\n      config: {\n        ...config,\n        chartType: 'pie'\n      },\n      confidence: 75\n    }, {\n      id: 'rec-scatter',\n      chartType: 'scatter',\n      name: `${name} - Scatter Plot`,\n      description: `Scatter plot showing relationship between ${xAxis.label} and ${yAxis.label}`,\n      fileId,\n      config: {\n        ...config,\n        chartType: 'scatter'\n      },\n      confidence: 70\n    }];\n  };\n  const renderCharts = async charts => {\n    // Clean up existing chart instances\n    Object.values(chartInstances.current).forEach(instance => {\n      if (instance) instance.destroy();\n    });\n    chartInstances.current = {};\n\n    // Fetch the actual data for the charts\n    try {\n      const response = await fetch(`/api/files/${file._id}/preview`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch file data');\n      }\n      const {\n        rows,\n        headers\n      } = await response.json();\n\n      // Create new chart instances\n      charts.forEach(chart => {\n        var _chartRefs$current$ch;\n        const chartId = chart.id;\n        const ctx = (_chartRefs$current$ch = chartRefs.current[chartId]) === null || _chartRefs$current$ch === void 0 ? void 0 : _chartRefs$current$ch.getContext('2d');\n        if (ctx) {\n          const xField = chart.config.xAxis.field;\n          const yField = chart.config.yAxis.field;\n\n          // Process data for the chart\n          const labels = rows.map(row => row[xField] || 'N/A');\n          const dataValues = rows.map(row => parseFloat(row[yField]) || 0);\n\n          // Create chart\n          const chartConfig = {\n            type: chart.chartType,\n            data: {\n              labels,\n              datasets: [{\n                label: chart.config.yAxis.label,\n                data: dataValues,\n                backgroundColor: getColors(chart.chartType, labels.length),\n                borderColor: chart.chartType === 'line' ? '#4caf50' : undefined,\n                borderWidth: 1\n              }]\n            },\n            options: {\n              responsive: true,\n              maintainAspectRatio: false,\n              plugins: {\n                title: {\n                  display: true,\n                  text: chart.name\n                }\n              }\n            }\n          };\n\n          // Special options for specific chart types\n          if (chart.chartType === 'pie') {\n            chartConfig.options.layout = {\n              padding: 10\n            };\n          }\n          chartInstances.current[chartId] = new Chart(ctx, chartConfig);\n        }\n      });\n    } catch (err) {\n      console.error('Error rendering charts:', err);\n      setError('Failed to render charts');\n    }\n  };\n  const getColors = (chartType, count) => {\n    const baseColors = ['#4caf50', '#2196f3', '#ff9800', '#f44336', '#9c27b0', '#3f51b5', '#e91e63', '#009688', '#673ab7', '#ffc107', '#cddc39', '#795548'];\n    if (chartType === 'line' || chartType === 'scatter') {\n      return baseColors[0];\n    }\n\n    // For bar and pie charts, generate array of colors\n    return Array(count).fill(0).map((_, i) => baseColors[i % baseColors.length]);\n  };\n  const getChartIcon = chartType => {\n    switch (chartType) {\n      case 'bar':\n        return /*#__PURE__*/_jsxDEV(BarChartIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 26\n        }, this);\n      case 'line':\n        return /*#__PURE__*/_jsxDEV(LineChartIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 27\n        }, this);\n      case 'pie':\n        return /*#__PURE__*/_jsxDEV(PieChartIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 26\n        }, this);\n      case 'scatter':\n        return /*#__PURE__*/_jsxDEV(ScatterIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 30\n        }, this);\n      case 'stacked':\n        return /*#__PURE__*/_jsxDEV(StackedIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 30\n        }, this);\n      case 'donut':\n        return /*#__PURE__*/_jsxDEV(DonutIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 28\n        }, this);\n      case 'map':\n        return /*#__PURE__*/_jsxDEV(MapIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 26\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(TableChartIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 23\n        }, this);\n    }\n  };\n  const handleSave = chart => {\n    if (onSaveChart) {\n      onSaveChart({\n        name: chart.name,\n        description: chart.description,\n        fileId: chart.fileId,\n        chartType: chart.chartType,\n        config: chart.config\n      });\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n        size: 40\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          mt: 2\n        },\n        children: \"Analyzing data and generating recommendations...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this);\n  }\n  if (!recommendations.length) {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"info\",\n      sx: {\n        mb: 2\n      },\n      children: \"No recommendations available. Try uploading a different dataset.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      mt: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        mb: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: [\"AI Recommended Visualizations\", /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: \"These visualizations are automatically recommended based on your data characteristics\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            size: \"small\",\n            sx: {\n              ml: 1\n            },\n            children: /*#__PURE__*/_jsxDEV(InfoIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: recommendations.map(chart => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          variant: \"outlined\",\n          sx: {\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column'\n          },\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            avatar: getChartIcon(chart.chartType),\n            title: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center'\n              },\n              children: [chart.name, /*#__PURE__*/_jsxDEV(Chip, {\n                size: \"small\",\n                label: `${chart.confidence}% match`,\n                color: chart.confidence > 90 ? 'success' : 'primary',\n                sx: {\n                  ml: 1\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 19\n            }, this),\n            subheader: chart.description,\n            sx: {\n              pb: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            sx: {\n              pt: 1,\n              flexGrow: 1\n            },\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                height: 220,\n                position: 'relative'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n                ref: el => chartRefs.current[chart.id] = el,\n                style: {\n                  width: '100%',\n                  height: '100%'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 316,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              size: \"small\",\n              variant: \"contained\",\n              startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 30\n              }, this),\n              onClick: () => handleSave(chart),\n              children: \"Save Visualization\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this)\n      }, chart.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 5\n  }, this);\n};\n_s(ChartRecommendations, \"YnDvm6QK7ykjKafcXgndQwDK8i4=\");\n_c = ChartRecommendations;\nexport default ChartRecommendations;\nvar _c;\n$RefreshReg$(_c, \"ChartRecommendations\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Box","Typography","Card","CardContent","CardHeader","CardActions","Button","Chip","Divider","Grid","LinearProgress","Paper","IconButton","Tooltip","Alert","CircularProgress","BarChart","BarChartIcon","PieChart","PieChartIcon","Timeline","LineChartIcon","BubbleChart","ScatterIcon","ShowChart","TrendIcon","DonutLarge","DonutIcon","TableChart","TableChartIcon","Layers","StackedIcon","Map","MapIcon","Info","InfoIcon","Add","AddIcon","Chart","jsxDEV","_jsxDEV","ChartRecommendations","file","onSaveChart","_s","loading","setLoading","recommendations","setRecommendations","error","setError","chartRefs","chartInstances","_id","generateRecommendations","Object","values","current","forEach","instance","destroy","analysisResponse","fetch","ok","Error","response","method","headers","data","json","success","visualization","baseRecommendation","recommendedCharts","generateChartVariations","setTimeout","renderCharts","err","console","message","fileId","config","name","xAxis","yAxis","id","chartType","description","label","confidence","charts","rows","chart","_chartRefs$current$ch","chartId","ctx","getContext","xField","field","yField","labels","map","row","dataValues","parseFloat","chartConfig","type","datasets","backgroundColor","getColors","length","borderColor","undefined","borderWidth","options","responsive","maintainAspectRatio","plugins","title","display","text","layout","padding","count","baseColors","Array","fill","_","i","getChartIcon","fileName","_jsxFileName","lineNumber","columnNumber","handleSave","sx","p","textAlign","children","size","variant","mt","severity","mb","justifyContent","alignItems","ml","fontSize","container","spacing","item","xs","md","height","flexDirection","avatar","color","subheader","pb","pt","flexGrow","position","ref","el","style","width","startIcon","onClick","_c","$RefreshReg$"],"sources":["E:/git_projects/DataVizPro/frontend/src/components/visualization/ChartRecommendations.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CardActions,\r\n  Button,\r\n  Chip,\r\n  Divider,\r\n  Grid,\r\n  LinearProgress,\r\n  Paper,\r\n  IconButton,\r\n  Tooltip,\r\n  Alert,\r\n  CircularProgress\r\n} from '@mui/material';\r\nimport {\r\n  BarChart as BarChartIcon,\r\n  PieChart as PieChartIcon,\r\n  Timeline as LineChartIcon,\r\n  BubbleChart as ScatterIcon,\r\n  ShowChart as TrendIcon,\r\n  DonutLarge as DonutIcon,\r\n  TableChart as TableChartIcon,\r\n  Layers as StackedIcon,\r\n  Map as MapIcon,\r\n  Info as InfoIcon,\r\n  Add as AddIcon\r\n} from '@mui/icons-material';\r\nimport Chart from 'chart.js/auto';\r\n\r\nconst ChartRecommendations = ({ file, onSaveChart }) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [recommendations, setRecommendations] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const chartRefs = useRef({});\r\n  const chartInstances = useRef({});\r\n\r\n  useEffect(() => {\r\n    if (file?._id) {\r\n      generateRecommendations(file);\r\n    }\r\n    \r\n    return () => {\r\n      // Clean up charts on unmount\r\n      Object.values(chartInstances.current).forEach(instance => {\r\n        if (instance) instance.destroy();\r\n      });\r\n      chartInstances.current = {};\r\n    };\r\n  }, [file]);\r\n\r\n  const generateRecommendations = async (file) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // First ensure we have analysis data\r\n      const analysisResponse = await fetch(`/api/files/${file._id}/analyze`);\r\n      if (!analysisResponse.ok) {\r\n        throw new Error('Failed to analyze file data');\r\n      }\r\n      \r\n      // Then request AI recommendations\r\n      const response = await fetch(`/api/visualizations/recommend/${file._id}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Failed to generate recommendations');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (data.success && data.visualization) {\r\n        // For this demo, we'll generate multiple chart types from the recommendation\r\n        const baseRecommendation = data.visualization;\r\n        const recommendedCharts = generateChartVariations(baseRecommendation);\r\n        setRecommendations(recommendedCharts);\r\n        \r\n        // Render charts after component updates\r\n        setTimeout(() => {\r\n          renderCharts(recommendedCharts);\r\n        }, 200);\r\n      } else {\r\n        setError('No recommendations available');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error generating recommendations:', err);\r\n      setError(err.message || 'Failed to generate recommendations');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  const generateChartVariations = (baseRecommendation) => {\r\n    // Extract fields from the recommendation\r\n    const { fileId, config, name } = baseRecommendation;\r\n    const { xAxis, yAxis } = config;\r\n    \r\n    // Generate variations based on data types\r\n    return [\r\n      {\r\n        id: 'rec-bar',\r\n        chartType: 'bar',\r\n        name: `${name} - Bar Chart`,\r\n        description: `Bar chart showing ${yAxis.label} by ${xAxis.label}`,\r\n        fileId,\r\n        config: { ...config, chartType: 'bar' },\r\n        confidence: 95\r\n      },\r\n      {\r\n        id: 'rec-line',\r\n        chartType: 'line',\r\n        name: `${name} - Line Chart`,\r\n        description: `Line chart showing trends in ${yAxis.label} over ${xAxis.label}`,\r\n        fileId,\r\n        config: { ...config, chartType: 'line' },\r\n        confidence: 85\r\n      },\r\n      {\r\n        id: 'rec-pie',\r\n        chartType: 'pie',\r\n        name: `${name} - Pie Chart`,\r\n        description: `Pie chart showing distribution of ${yAxis.label} across ${xAxis.label}`,\r\n        fileId,\r\n        config: { ...config, chartType: 'pie' },\r\n        confidence: 75\r\n      },\r\n      {\r\n        id: 'rec-scatter',\r\n        chartType: 'scatter',\r\n        name: `${name} - Scatter Plot`,\r\n        description: `Scatter plot showing relationship between ${xAxis.label} and ${yAxis.label}`,\r\n        fileId,\r\n        config: { ...config, chartType: 'scatter' },\r\n        confidence: 70\r\n      }\r\n    ];\r\n  };\r\n\r\n  const renderCharts = async (charts) => {\r\n    // Clean up existing chart instances\r\n    Object.values(chartInstances.current).forEach(instance => {\r\n      if (instance) instance.destroy();\r\n    });\r\n    chartInstances.current = {};\r\n    \r\n    // Fetch the actual data for the charts\r\n    try {\r\n      const response = await fetch(`/api/files/${file._id}/preview`);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch file data');\r\n      }\r\n      \r\n      const { rows, headers } = await response.json();\r\n      \r\n      // Create new chart instances\r\n      charts.forEach(chart => {\r\n        const chartId = chart.id;\r\n        const ctx = chartRefs.current[chartId]?.getContext('2d');\r\n        \r\n        if (ctx) {\r\n          const xField = chart.config.xAxis.field;\r\n          const yField = chart.config.yAxis.field;\r\n          \r\n          // Process data for the chart\r\n          const labels = rows.map(row => row[xField] || 'N/A');\r\n          const dataValues = rows.map(row => parseFloat(row[yField]) || 0);\r\n          \r\n          // Create chart\r\n          const chartConfig = {\r\n            type: chart.chartType,\r\n            data: {\r\n              labels,\r\n              datasets: [{\r\n                label: chart.config.yAxis.label,\r\n                data: dataValues,\r\n                backgroundColor: getColors(chart.chartType, labels.length),\r\n                borderColor: chart.chartType === 'line' ? '#4caf50' : undefined,\r\n                borderWidth: 1\r\n              }]\r\n            },\r\n            options: {\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              plugins: {\r\n                title: {\r\n                  display: true,\r\n                  text: chart.name\r\n                }\r\n              }\r\n            }\r\n          };\r\n          \r\n          // Special options for specific chart types\r\n          if (chart.chartType === 'pie') {\r\n            chartConfig.options.layout = { padding: 10 };\r\n          }\r\n          \r\n          chartInstances.current[chartId] = new Chart(ctx, chartConfig);\r\n        }\r\n      });\r\n    } catch (err) {\r\n      console.error('Error rendering charts:', err);\r\n      setError('Failed to render charts');\r\n    }\r\n  };\r\n  \r\n  const getColors = (chartType, count) => {\r\n    const baseColors = [\r\n      '#4caf50', '#2196f3', '#ff9800', '#f44336', \r\n      '#9c27b0', '#3f51b5', '#e91e63', '#009688',\r\n      '#673ab7', '#ffc107', '#cddc39', '#795548'\r\n    ];\r\n    \r\n    if (chartType === 'line' || chartType === 'scatter') {\r\n      return baseColors[0];\r\n    }\r\n    \r\n    // For bar and pie charts, generate array of colors\r\n    return Array(count).fill(0).map((_, i) => baseColors[i % baseColors.length]);\r\n  };\r\n\r\n  const getChartIcon = (chartType) => {\r\n    switch (chartType) {\r\n      case 'bar': return <BarChartIcon />;\r\n      case 'line': return <LineChartIcon />;\r\n      case 'pie': return <PieChartIcon />;\r\n      case 'scatter': return <ScatterIcon />;\r\n      case 'stacked': return <StackedIcon />;\r\n      case 'donut': return <DonutIcon />;\r\n      case 'map': return <MapIcon />;\r\n      default: return <TableChartIcon />;\r\n    }\r\n  };\r\n\r\n  const handleSave = (chart) => {\r\n    if (onSaveChart) {\r\n      onSaveChart({\r\n        name: chart.name,\r\n        description: chart.description,\r\n        fileId: chart.fileId,\r\n        chartType: chart.chartType,\r\n        config: chart.config\r\n      });\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ p: 3, textAlign: 'center' }}>\r\n        <CircularProgress size={40} />\r\n        <Typography variant=\"h6\" sx={{ mt: 2 }}>Analyzing data and generating recommendations...</Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n        {error}\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  if (!recommendations.length) {\r\n    return (\r\n      <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n        No recommendations available. Try uploading a different dataset.\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ mt: 3 }}>\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n        <Typography variant=\"h6\">\r\n          AI Recommended Visualizations\r\n          <Tooltip title=\"These visualizations are automatically recommended based on your data characteristics\">\r\n            <IconButton size=\"small\" sx={{ ml: 1 }}>\r\n              <InfoIcon fontSize=\"small\" />\r\n            </IconButton>\r\n          </Tooltip>\r\n        </Typography>\r\n      </Box>\r\n      \r\n      <Grid container spacing={3}>\r\n        {recommendations.map((chart) => (\r\n          <Grid item xs={12} md={6} key={chart.id}>\r\n            <Card variant=\"outlined\" sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\r\n              <CardHeader\r\n                avatar={getChartIcon(chart.chartType)}\r\n                title={\r\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                    {chart.name}\r\n                    <Chip \r\n                      size=\"small\" \r\n                      label={`${chart.confidence}% match`}\r\n                      color={chart.confidence > 90 ? 'success' : 'primary'}\r\n                      sx={{ ml: 1 }}\r\n                    />\r\n                  </Box>\r\n                }\r\n                subheader={chart.description}\r\n                sx={{ pb: 0 }}\r\n              />\r\n              <CardContent sx={{ pt: 1, flexGrow: 1 }}>\r\n                <Box sx={{ height: 220, position: 'relative' }}>\r\n                  <canvas\r\n                    ref={el => chartRefs.current[chart.id] = el}\r\n                    style={{ width: '100%', height: '100%' }}\r\n                  />\r\n                </Box>\r\n              </CardContent>\r\n              <CardActions>\r\n                <Button \r\n                  size=\"small\" \r\n                  variant=\"contained\" \r\n                  startIcon={<AddIcon />}\r\n                  onClick={() => handleSave(chart)}\r\n                >\r\n                  Save Visualization\r\n                </Button>\r\n              </CardActions>\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ChartRecommendations; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}